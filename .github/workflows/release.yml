name: Release

on:
  push:
    tags:
      - 'v*'

# Cancel in-progress workflow runs on the same tag
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `Tauri Blazor Boilerplate v${process.env.VERSION}`,
              body: 'See the assets to download and install this version.',
              draft: true,
              prerelease: false
            });
            return data.id
        env:
          VERSION: ${{ steps.get_version.outputs.version }}

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: universal-apple-darwin
            filename_suffix: macos
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            filename_suffix: linux
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            filename_suffix: windows

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          
      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/TauriBlazorBoilerplate.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
            
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      # Cache Rust dependencies
      - name: Cache Rust Dependencies and Build Artifacts
        uses: actions/cache@v4
        id: rust-cache
        with:
          path: |
            ~/.cargo
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
          
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Try to determine the correct WebKitGTK package name for current Ubuntu version
          if apt-cache show libwebkit2gtk-4.0-dev > /dev/null 2>&1; then
            WEBKIT_DEV_PACKAGE="libwebkit2gtk-4.0-dev"
          elif apt-cache show libwebkit2gtk-4.1-dev > /dev/null 2>&1; then
            # Ubuntu 24.04 (Noble) uses WebKitGTK 4.1
            WEBKIT_DEV_PACKAGE="libwebkit2gtk-4.1-dev"
          elif apt-cache show libwebkit2gtk-6.0-dev > /dev/null 2>&1; then
            # Future Ubuntu versions might use WebKitGTK 6.0
            WEBKIT_DEV_PACKAGE="libwebkit2gtk-6.0-dev"
          else
            echo "Unable to determine WebKitGTK package name"
            exit 1
          fi
          echo "Using WebKitGTK package: $WEBKIT_DEV_PACKAGE"
          sudo apt-get install -y --no-install-recommends libgtk-3-dev $WEBKIT_DEV_PACKAGE libappindicator3-dev librsvg2-dev patchelf
          
      # Cache Tauri CLI installation - better caching strategy
      - name: Cache Tauri CLI
        id: cache-tauri-cli
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-tauri
          key: ${{ runner.os }}-cargo-tauri-cli-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install app dependencies
        if: steps.cache-tauri-cli.outputs.cache-hit != 'true'
        run: |
          # Using --force to ensure proper installation and --debug=false to speed up
          cargo install tauri-cli --locked --force --debug=false

      - name: Build Blazor App
        shell: bash
        run: dotnet publish -c Release src/TauriBlazorBoilerplate.csproj -o dist

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Significantly optimize Rust compilation for releases
          CARGO_INCREMENTAL: 0
          CARGO_NET_RETRY: 10
          RUSTUP_MAX_RETRIES: 10
          CARGO_TERM_COLOR: always
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_PANIC: "abort"
          CARGO_PROFILE_RELEASE_STRIP: true
          # Set parallel compilation based on available cores
          CARGO_BUILD_JOBS: 4
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          tauriScript: cargo tauri
          args: --target ${{ matrix.target }} --verbose
        
  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-tauri]
    
    steps:
      - name: Publish release
        id: publish-release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            })
